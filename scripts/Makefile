# Teer Betting Application - Makefile
# Simplifies development and deployment tasks

.PHONY: help install dev build test clean deploy-dev deploy-prod backup restore lint format

# Default target
help:
	@echo "üéØ Teer Betting Application - Available Commands"
	@echo "=================================================="
	@echo ""
	@echo "üì¶ Setup & Installation:"
	@echo "  make install          Install all dependencies"
	@echo "  make install-backend  Install backend dependencies only"
	@echo "  make install-frontend Install frontend dependencies only"
	@echo ""
	@echo "üöÄ Development:"
	@echo "  make dev              Start development environment"
	@echo "  make dev-backend      Start backend development server"
	@echo "  make dev-frontend     Start frontend development server"
	@echo "  make dev-db           Start database only"
	@echo ""
	@echo "üèóÔ∏è  Build & Test:"
	@echo "  make build            Build all services"
	@echo "  make test             Run all tests"
	@echo "  make test-backend     Run backend tests"
	@echo "  make test-frontend    Run frontend tests"
	@echo "  make lint             Run linting on all code"
	@echo "  make format           Format all code"
	@echo ""
	@echo "üê≥ Docker Operations:"
	@echo "  make docker-build     Build Docker images"
	@echo "  make docker-up        Start all containers"
	@echo "  make docker-down      Stop all containers"
	@echo "  make docker-logs      Show container logs"
	@echo ""
	@echo "üöÄ Deployment:"
	@echo "  make deploy-dev       Deploy to development"
	@echo "  make deploy-staging   Deploy to staging"
	@echo "  make deploy-prod      Deploy to production"
	@echo ""
	@echo "üóÑÔ∏è  Database:"
	@echo "  make db-init          Initialize database with dummy data"
	@echo "  make db-migrate       Run database migrations"
	@echo "  make db-reset         Reset database (‚ö†Ô∏è  DESTRUCTIVE)"
	@echo "  make backup           Create database backup"
	@echo "  make restore          Restore database from backup"
	@echo ""
	@echo "üßπ Maintenance:"
	@echo "  make clean            Clean build artifacts"
	@echo "  make clean-docker     Remove all Docker containers and images"
	@echo "  make logs             Show application logs"

# Installation targets
install: install-backend install-frontend
	@echo "‚úÖ All dependencies installed successfully"

install-backend:
	@echo "üì¶ Installing backend dependencies..."
	cd backend && pip install -r requirements.txt

install-frontend:
	@echo "üì¶ Installing frontend dependencies..."
	cd frontend && npm install

# Development targets
dev: docker-up
	@echo "üöÄ Development environment started"
	@echo "Frontend: http://localhost:3000"
	@echo "Backend: http://localhost:8000"
	@echo "API Docs: http://localhost:8000/docs"
	@echo "pgAdmin: http://localhost:5050"

dev-backend:
	@echo "üöÄ Starting backend development server..."
	cd backend && uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

dev-frontend:
	@echo "üöÄ Starting frontend development server..."
	cd frontend && npm start

dev-db:
	@echo "üóÑÔ∏è Starting database only..."
	docker-compose up -d db redis

# Build targets
build: build-backend build-frontend
	@echo "‚úÖ All services built successfully"

build-backend:
	@echo "üèóÔ∏è Building backend..."
	cd backend && python -m py_compile app/main.py

build-frontend:
	@echo "üèóÔ∏è Building frontend..."
	cd frontend && npm run build

# Test targets
test: test-backend test-frontend
	@echo "‚úÖ All tests completed"

test-backend:
	@echo "üß™ Running backend tests..."
	cd backend && python -m pytest tests/ -v --cov=app --cov-report=html

test-frontend:
	@echo "üß™ Running frontend tests..."
	cd frontend && npm test -- --coverage --watchAll=false

# Code quality targets
lint: lint-backend lint-frontend
	@echo "‚úÖ Linting completed"

lint-backend:
	@echo "üîç Linting backend code..."
	cd backend && python -m flake8 app/ --max-line-length=127 --exclude=migrations

lint-frontend:
	@echo "üîç Linting frontend code..."
	cd frontend && npm run lint --if-present

format: format-backend format-frontend
	@echo "‚úÖ Code formatting completed"

format-backend:
	@echo "üé® Formatting backend code..."
	cd backend && python -m black app/ --line-length=127
	cd backend && python -m isort app/

format-frontend:
	@echo "üé® Formatting frontend code..."
	cd frontend && npm run format --if-present

# Docker targets
docker-build:
	@echo "üê≥ Building Docker images..."
	docker-compose build --no-cache

docker-up:
	@echo "üê≥ Starting all containers..."
	docker-compose up -d
	@echo "‚è≥ Waiting for services to start..."
	sleep 10
	@make db-init

docker-down:
	@echo "üê≥ Stopping all containers..."
	docker-compose down

docker-logs:
	@echo "üìã Showing container logs..."
	docker-compose logs -f

# Database targets
db-init:
	@echo "üóÑÔ∏è Initializing database with dummy data..."
	docker-compose exec -T backend python init_db.py || echo "Database already initialized"

db-migrate:
	@echo "üóÑÔ∏è Running database migrations..."
	docker-compose exec -T backend alembic upgrade head

db-reset:
	@echo "‚ö†Ô∏è  Resetting database (this will delete all data)..."
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker-compose down -v; \
		docker-compose up -d db; \
		sleep 5; \
		make db-init; \
	fi

# Backup and restore
backup:
	@echo "üíæ Creating database backup..."
	mkdir -p backups
	docker-compose exec -T db pg_dump -U postgres teer_betting > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup created in backups/ directory"

restore:
	@echo "üì• Available backups:"
	@ls -la backups/*.sql 2>/dev/null || echo "No backups found"
	@read -p "Enter backup filename (from backups/): " backup_file; \
	if [ -f "backups/$$backup_file" ]; then \
		docker-compose exec -T db psql -U postgres -d teer_betting < "backups/$$backup_file"; \
		echo "‚úÖ Database restored from $$backup_file"; \
	else \
		echo "‚ùå Backup file not found"; \
	fi

# Deployment targets
deploy-dev:
	@echo "üöÄ Deploying to development environment..."
	./deploy.sh dev

deploy-staging:
	@echo "üöÄ Deploying to staging environment..."
	./deploy.sh staging

deploy-prod:
	@echo "üöÄ Deploying to production environment..."
	@read -p "Are you sure you want to deploy to PRODUCTION? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		./deploy.sh production; \
	fi

# Maintenance targets
clean: clean-backend clean-frontend
	@echo "üßπ Cleanup completed"

clean-backend:
	@echo "üßπ Cleaning backend artifacts..."
	cd backend && find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	cd backend && find . -name "*.pyc" -delete 2>/dev/null || true
	cd backend && rm -rf .pytest_cache htmlcov .coverage 2>/dev/null || true

clean-frontend:
	@echo "üßπ Cleaning frontend artifacts..."
	cd frontend && rm -rf build coverage 2>/dev/null || true
	cd frontend && rm -rf node_modules/.cache 2>/dev/null || true

clean-docker:
	@echo "üßπ Cleaning Docker containers and images..."
	docker-compose down -v --remove-orphans
	docker system prune -f
	docker volume prune -f

logs:
	@echo "üìã Showing application logs..."
	docker-compose logs -f --tail=100

# Monitoring targets
monitor:
	@echo "üìä Starting monitoring stack..."
	docker-compose --profile monitoring up -d

monitor-down:
	@echo "üìä Stopping monitoring stack..."
	docker-compose --profile monitoring down

# Security scan
security-scan:
	@echo "üîí Running security scan..."
	cd backend && python -m safety check --json || true
	cd frontend && npm audit --audit-level high || true

# Performance test
perf-test:
	@echo "‚ö° Running performance tests..."
	@echo "Performance testing requires Apache Bench (ab) or Artillery"
	@echo "Install with: npm install -g artillery"
	# artillery quick --count 10 --num 3 http://localhost:8000/health

# Quick start for new developers
quick-start:
	@echo "üéØ Quick Start for New Developers"
	@echo "=================================="
	@make install
	@make docker-up
	@echo ""
	@echo "‚úÖ Setup complete! Your Teer Betting platform is running:"
	@echo "   Frontend: http://localhost"
	@echo "   Backend:  http://localhost:8000"
	@echo "   Admin:    login with admin/admin123"
	@echo "   User:     login with testuser1/test123"

# Environment validation
validate-env:
	@echo "üîç Validating environment..."
	@command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker not installed"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "‚ùå Docker Compose not installed"; exit 1; }
	@command -v python3 >/dev/null 2>&1 || { echo "‚ùå Python 3 not installed"; exit 1; }
	@command -v node >/dev/null 2>&1 || { echo "‚ùå Node.js not installed"; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo "‚ùå npm not installed"; exit 1; }
	@echo "‚úÖ Environment validation passed"

.DEFAULT_GOAL := help