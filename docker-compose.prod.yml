version: '3.8'

services:
  # PostgreSQL Database (Optimized for 1GB RAM)
  db:
    image: postgres:15-alpine
    container_name: teer_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: teer_betting
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: TEERprod2025
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/scripts:/docker-entrypoint-initdb.d/
    ports:
      - "127.0.0.1:5432:5432"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d teer_betting"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      postgres
      -c shared_buffers=64MB
      -c effective_cache_size=128MB
      -c maintenance_work_mem=16MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=4MB
      -c default_statistics_target=100
      -c random_page_cost=4
      -c effective_io_concurrency=2
      -c work_mem=2MB
      -c min_wal_size=80MB
      -c max_wal_size=1GB
    networks:
      - teer_network

  # FastAPI Backend (Production Optimized)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: teer_backend_prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:TEERprod2025@db:5432/teer_betting
      - SECRET_KEY=TEER_PROD_2025_SUPER_SECRET_KEY_XmKp9vQ2wE7rT5yU8iO1pA3sD6fG9hJ2kL5nM8qR1tY4wE7r
      - DEBUG=False
      - ENVIRONMENT=production
      - VPS_IP=178.128.61.118
      - BACKEND_CORS_ORIGINS=http://178.128.61.118,http://178.128.61.118:80,https://178.128.61.118,https://178.128.61.118:80
      - ALLOWED_ORIGINS=http://178.128.61.118,http://178.128.61.118:80,https://178.128.61.118,https://178.128.61.118:80
      - WORKERS=2
      - MAX_WORKERS=2
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 256M
    networks:
      - teer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # React Frontend (Production Build)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_BASE_URL: http://178.128.61.118:8000/api/v1
        NODE_ENV: production
    container_name: teer_frontend_prod
    restart: unless-stopped
    environment:
      - REACT_APP_API_BASE_URL=http://178.128.61.118:8000/api/v1
    ports:
      - "80:80"
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    networks:
      - teer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis (Lightweight for sessions/cache)
  redis:
    image: redis:7-alpine
    container_name: teer_redis_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data_prod:/data
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M
    command: redis-server --appendonly yes --maxmemory 32mb --maxmemory-policy allkeys-lru
    networks:
      - teer_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  teer_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
