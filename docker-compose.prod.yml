version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: teer_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-teer_betting}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5434}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - teer_network

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: teer_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-teer_betting}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000,http://localhost:80,http://localhost,http://127.0.0.1:80,http://127.0.0.1,http://frontend:80,http://teer_frontend_prod:80}
      - ENVIRONMENT=production
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - teer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 40s

  # React Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-/api/v1}
    container_name: teer_frontend_prod
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-/api/v1}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - teer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: teer_redis_prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    restart: unless-stopped
    networks:
      - teer_network

  # Nginx Reverse Proxy (Optional - for production load balancing)
  nginx:
    image: nginx:1.25-alpine
    container_name: teer_nginx_prod
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - teer_network

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  teer_network:
    driver: bridge
