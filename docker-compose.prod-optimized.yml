version: '3.8'

services:
  # PostgreSQL Database (Optimized for 1GB RAM)
  db:
    image: postgres:15-alpine
    container_name: teer_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-teer_betting}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      # PostgreSQL memory optimization for 1GB RAM
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    command: |
      postgres
      -c shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}
      -c effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-384MB}
      -c work_mem=${POSTGRES_WORK_MEM:-4MB}
      -c maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
      -c max_connections=${POSTGRES_MAX_CONNECTIONS:-50}
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${DATABASE_MEMORY_LIMIT:-400m}
          cpus: '0.7'
    networks:
      - teer_network

  # Redis (Lightweight configuration for 1GB RAM)
  redis:
    image: redis:7-alpine
    container_name: teer_redis_prod
    command: |
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-RedisSecure2025}
      --maxmemory ${REDIS_MAXMEMORY:-256mb}
      --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data_prod:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-100m}
          cpus: '0.2'
    networks:
      - teer_network

  # FastAPI Backend (Memory optimized)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: teer_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@db:5432/${POSTGRES_DB:-teer_betting}
      - SECRET_KEY=${SECRET_KEY:-teer-betting-super-secure-key-2025-8A7B9C2D1E3F4G5H6I9J0K1L2M3N4O5P}
      - DEBUG=${DEBUG:-False}
      - ENVIRONMENT=production
      - VPS_IP=${VPS_IP:-178.128.61.118}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://178.128.61.118,http://178.128.61.118:80,https://178.128.61.118,https://178.128.61.118:443}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://178.128.61.118,http://178.128.61.118:80,https://178.128.61.118,https://178.128.61.118:443}
      - API_V1_STR=${API_V1_STR:-/api/v1}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-720}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Python memory optimization
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - MALLOC_ARENA_MAX=2
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY_LIMIT:-300m}
          cpus: '0.8'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-60s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - teer_network

  # React Frontend (Memory optimized)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-http://178.128.61.118:8000/api/v1}
    container_name: teer_frontend_prod
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-http://178.128.61.118:8000/api/v1}
      - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${FRONTEND_MEMORY_LIMIT:-150m}
          cpus: '0.3'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - teer_network

  # Nginx (Optional - only if needed for SSL/reverse proxy)
  # Commented out to save resources on 1GB RAM
  # nginx:
  #   image: nginx:1.25-alpine
  #   container_name: teer_nginx_prod
  #   ports:
  #     - "443:443"
  #     - "8080:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #   restart: unless-stopped
  #   networks:
  #     - teer_network

  # Monitoring (Optional - commented out to save RAM)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: teer_prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - teer_network

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  teer_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
