# Multi-stage build for production (1GB RAM Optimized)
FROM node:18-alpine as build

# Set environment variables for optimization
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV NODE_OPTIONS="--max-old-space-size=512"

WORKDIR /app

ARG REACT_APP_API_BASE_URL
ARG NODE_ENV=production

# Copy package files
COPY package*.json ./

# Install dependencies (production only)
RUN npm ci --only=production --silent --no-audit --no-fund

# Copy source code
COPY . .

# Set API URL for production build
ENV REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}

# Build the app (optimized for 1GB RAM)
RUN echo "Building with REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL" && \
    npm run build && \
    npm cache clean --force

# Production stage with nginx (minimal alpine)
FROM nginx:1.25-alpine

# Install curl for health checks
RUN apk add --no-cache curl \
    && rm -rf /var/cache/apk/*

# Remove default nginx config and files
RUN rm /etc/nginx/conf.d/default.conf \
    && rm -rf /usr/share/nginx/html/*

# Copy built app from build stage
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.prod.conf /etc/nginx/conf.d/default.conf

# Create nginx user and set permissions
RUN addgroup -g 1001 -S nginx-prod && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-prod -g nginx-prod nginx-prod && \
    chown -R nginx-prod:nginx-prod /usr/share/nginx/html /var/cache/nginx /var/run /var/log/nginx

# Expose port
EXPOSE 80

# Health check (optimized)
HEALTHCHECK --interval=60s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Run as non-root user
USER nginx-prod

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]