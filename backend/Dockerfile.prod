# Multi-stage build for production
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        libpq-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PATH=/root/.local/bin:$PATH

# Set work directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libpq5 \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies from builder stage
COPY --from=builder /root/.local /usr/local

# Production Dockerfile (multi-stage)
# - Installs build deps in builder layer
# - Copies only installed site-packages + app source
# - Runs with a non-root user for safety

# Copy project files (after deps to leverage layer cache)
COPY . .

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application with gunicorn for production
# Allow dynamic worker count (default 1 for low-memory envs)
ENV WORKERS=1

# Create non-root user (only if not existing)
RUN useradd -m -u 1001 appuser || true \
    && chown -R appuser:appuser /app

# Copy start script (already in context from COPY . . above) and ensure executable
RUN chmod +x /app/start.sh || true

USER appuser

# Use start script to run migrations then launch server (will exec gunicorn inside script)
CMD ["/app/start.sh"]